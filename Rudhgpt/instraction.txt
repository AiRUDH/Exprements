I'll create a complete, fully responsive AI chat website in React.js that works like ChatGPT using the Perplexity API. Let me break this down into organized files with explanations.

## Project Structure

```
src/
├── App.jsx
├── index.jsx
├── components/
│   ├── ChatWindow.jsx
│   ├── Sidebar.jsx
│   ├── Message.jsx
│   ├── InputBox.jsx
│   ├── Loader.jsx
│   └── ThemeToggle.jsx
├── index.css
├── tailwind.config.js
└── .env.example
```

## File Explanations

- **App.jsx**: Main application component managing state, theme, and layout
- **ChatWindow.jsx**: Main chat interface with messages and input
- **Sidebar.jsx**: Left sidebar with conversation history and theme toggle
- **Message.jsx**: Individual message component with markdown support
- **InputBox.jsx**: Input field with multiline support and send functionality
- **Loader.jsx**: Loading animation component
- **ThemeToggle.jsx**: Dark/light theme toggle button

## Complete Code Files

### 1. `App.jsx`
```jsx
import React, { useState, useEffect } from 'react';
import ChatWindow from './components/ChatWindow';
import Sidebar from './components/Sidebar';

const App = () => {
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [messages, setMessages] = useState([
    {
      id: 1,
      role: 'assistant',
      content: 'Hello! I\'m your AI assistant. How can I help you today?',
      timestamp: new Date()
    }
  ]);
  const [isLoading, setIsLoading] = useState(false);
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);

  // Load theme from localStorage on mount
  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') {
      setIsDarkMode(true);
    } else if (savedTheme === 'light') {
      setIsDarkMode(false);
    } else {
      // Default to system preference
      setIsDarkMode(window.matchMedia('(prefers-color-scheme: dark)').matches);
    }
  }, []);

  // Apply theme to document
  useEffect(() => {
    if (isDarkMode) {
      document.documentElement.classList.add('dark');
      localStorage.setItem('theme', 'dark');
    } else {
      document.documentElement.classList.remove('dark');
      localStorage.setItem('theme', 'light');
    }
  }, [isDarkMode]);

  const toggleTheme = () => {
    setIsDarkMode(!isDarkMode);
  };

  const sendMessage = async (content) => {
    if (!content.trim()) return;

    const userMessage = {
      id: Date.now(),
      role: 'user',
      content: content.trim(),
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setIsLoading(true);

    try {
      // Prepare messages for API (exclude id and timestamp)
      const apiMessages = [...messages, userMessage].map(msg => ({
        role: msg.role,
        content: msg.content
      }));

      const response = await fetch('https://api.perplexity.ai/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${process.env.REACT_APP_PERPLEXITY_API_KEY}`
        },
        body: JSON.stringify({
          model: 'pplx-7b-online',
          messages: apiMessages,
          max_tokens: 1000,
          temperature: 0.7,
          stream: false
        })
      });

      if (!response.ok) {
        throw new Error(`API Error: ${response.status}`);
      }

      const data = await response.json();
      const assistantMessage = {
        id: Date.now() + 1,
        role: 'assistant',
        content: data.choices[0].message.content,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
      console.error('Error sending message:', error);
      const errorMessage = {
        id: Date.now() + 1,
        role: 'assistant',
        content: 'Sorry, I encountered an error. Please check your API key and try again.',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    
      
        {/* Sidebar */}
         setIsSidebarOpen(false)}
          isDarkMode={isDarkMode}
          toggleTheme={toggleTheme}
        />

        {/* Main Content */}
        
          {/* Top Navbar */}
          
            
              
                 setIsSidebarOpen(true)}
                  className="lg:hidden p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  aria-label="Open sidebar"
                >
                  
                    
                  
                
                
                  Perplexity Chat
                
              
              
                
                  {isDarkMode ? (
                    
                      
                    
                  ) : (
                    
                      
                    
                  )}
                
              
            
          

          {/* Chat Window */}
          
        
      

      {/* Mobile sidebar overlay */}
      {isSidebarOpen && (
         setIsSidebarOpen(false)}
        />
      )}
    
  );
};

export default App;
```

### 2. `index.jsx`
```jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  
    
  
);
```

### 3. `components/ChatWindow.jsx`
```jsx
import React, { useEffect, useRef } from 'react';
import Message from './Message';
import InputBox from './InputBox';
import Loader from './Loader';

const ChatWindow = ({ messages, isLoading, onSendMessage }) => {
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages, isLoading]);

  return (
    
      {/* Messages Container */}
      
        {messages.map((message) => (
          
        ))}
        {isLoading && }
        
      

      {/* Input Box */}
      
    
  );
};

export default ChatWindow;
```

### 4. `components/Sidebar.jsx`
```jsx
import React from 'react';
import ThemeToggle from './ThemeToggle';

const Sidebar = ({ isOpen, onClose, isDarkMode, toggleTheme }) => {
  // Dummy conversation history
  const conversations = [
    { id: 1, title: 'React Development Tips', timestamp: '2 hours ago' },
    { id: 2, title: 'JavaScript Best Practices', timestamp: '1 day ago' },
    { id: 3, title: 'CSS Grid Layout', timestamp: '3 days ago' },
    { id: 4, title: 'API Integration Guide', timestamp: '1 week ago' },
  ];

  return (
    <>
      
        
          {/* Sidebar Header */}
          
            
              
                Conversations
              
              
                
                  
                
              
            
          

          {/* New Chat Button */}
          
            
              
                
              
              New Chat
            
          

          {/* Conversation History */}
          
            {conversations.map((conversation) => (
              
                
                  {conversation.title}
                
                
                  {conversation.timestamp}
                
              
            ))}
          

          {/* Theme Toggle */}
          
            
          
        
      
    
  );
};

export default Sidebar;
```

### 5. `components/Message.jsx`
```jsx
import React from 'react';

const Message = ({ message }) => {
  const isUser = message.role === 'user';

  const formatContent = (content) => {
    // Basic markdown support
    let formatted = content
      // Bold text
      .replace(/\*\*(.*?)\*\*/g, '$1')
      // Italic text
      .replace(/\*(.*?)\*/g, '$1')
      // Inline code
      .replace(/`(.*?)`/g, '$1')
      // Line breaks
      .replace(/\n/g, '');

    // Code blocks
    formatted = formatted.replace(/``````/g, (match, code) => {
      return `${code.trim()}`;
    });

    return formatted;
  };

  return (
    
      
        
          {/* Avatar */}
          
            {isUser ? (
              
                
              
            ) : (
              
                
              
            )}
          

          {/* Message Content */}
          
            
            
              {message.timestamp?.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
            
          
        
      
    
  );
};

export default Message;
```

### 6. `components/InputBox.jsx`
```jsx
import React, { useState, useRef, useEffect } from 'react';

const InputBox = ({ onSendMessage, disabled }) => {
  const [message, setMessage] = useState('');
  const textareaRef = useRef(null);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (message.trim() && !disabled) {
      onSendMessage(message);
      setMessage('');
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSubmit(e);
    }
  };

  // Auto-resize textarea
  useEffect(() => {
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = 'auto';
      textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
    }
  }, [message]);

  return (
    
      
        
           setMessage(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder="Type a message... (Enter to send, Shift+Enter for new line)"
            className="w-full resize-none border border-gray-300 dark:border-gray-600 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 placeholder-gray-500 dark:placeholder-gray-400"
            rows="1"
            style={{ minHeight: '40px', maxHeight: '120px' }}
            disabled={disabled}
          />
        
        
          
            
          
        
      
      
        Press Enter to send, Shift+Enter for new line
      
    
  );
};

export default InputBox;
```

### 7. `components/Loader.jsx`
```jsx
import React from 'react';

const Loader = () => {
  return (
    
      
        
          {/* Avatar */}
          
            
              
            
          

          {/* Loading Animation */}
          
            
              
              
              
            
          
        
      
    
  );
};

export default Loader;
```

### 8. `components/ThemeToggle.jsx`
```jsx
import React from 'react';

const ThemeToggle = ({ isDarkMode, toggleTheme }) => {
  return (
    
      
        {isDarkMode ? 'Light Mode' : 'Dark Mode'}
      
      
        {isDarkMode ? (
          
            
          
        ) : (
          
            
          
        )}
      
    
  );
};

export default ThemeToggle;
```

### 9. `tailwind.config.js`
```javascript
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
    "./public/index.html"
  ],
  darkMode: 'class',
  theme: {
    extend: {
      animation: {
        'fade-in': 'fadeIn 0.3s ease-in-out',
        'bounce': 'bounce 1s infinite',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0', transform: 'translateY(10px)' },
          '100%': { opacity: '1', transform: 'translateY(0)' },
        },
        bounce: {
          '0%, 100%': {
            transform: 'translateY(-25%)',
            animationTimingFunction: 'cubic-bezier(0.8, 0, 1, 1)',
          },
          '50%': {
            transform: 'translateY(0)',
            animationTimingFunction: 'cubic-bezier(0, 0, 0.2, 1)',
          },
        },
      },
    },
  },
  plugins: [],
}
```

### 10. `index.css`
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 6px;
}

::-webkit-scrollbar-track {
  @apply bg-gray-100 dark:bg-gray-800;
}

::-webkit-scrollbar-thumb {
  @apply bg-gray-400 dark:bg-gray-600 rounded-full;
}

::-webkit-scrollbar-thumb:hover {
  @apply bg-gray-500 dark:bg-gray-500;
}

/* Smooth transitions */
* {
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

/* Focus styles */
*:focus {
  outline: 2px solid transparent;
  outline-offset: 2px;
}

/* Code block styling */
pre {
  white-space: pre-wrap;
  word-wrap: break-word;
}

code {
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
}

/* Animation classes */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fade-in {
  animation: fadeIn 0.3s ease-in-out;
}

/* Loading animation */
@keyframes bounce {
  0%, 100% {
    transform: translateY(-25%);
    animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
  }
  50% {
    transform: translateY(0);
    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
}

.animate-bounce {
  animation: bounce 1s infinite;
}
```

### 11. `.env.example`
```env
# Perplexity API Configuration
REACT_APP_PERPLEXITY_API_KEY=your_api_key_here

# Example with your provided key (DO NOT COMMIT THIS TO VERSION CONTROL)
# REACT_APP_PERPLEXITY_API_KEY=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
```

## Setup Instructions

1. **Create React App:**
```bash
npx create-react-app perplexity-chat
cd perplexity-chat
```

2. **Install Tailwind CSS:**
```bash
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
```

3. **Replace the generated files** with the code above

4. **Create environment file:**
```bash
cp .env.example .env.local
```

5. **Update `.env.local`** with your API key:
```env
REACT_APP_PERPLEXITY_API_KEY=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
```

6. **Start the development server:**
```bash
npm start
```

## 🔒 Security Warning

**IMPORTANT**: The provided API key is now exposed in this conversation. You should:
1. **Regenerate your API key** immediately in your Perplexity account
2. **Never commit `.env.local`** to version control
3. **Consider implementing a backend proxy** to keep the API key server-side

## Features Implemented

✅ **Dark/Light theme toggle** with localStorage persistence  
✅ **Responsive design** for desktop and mobile  
✅ **Fixed sidebar** with conversation history (dummy data)  
✅ **ChatGPT-like interface** with user/assistant bubbles  
✅ **Markdown support** (bold, italic, code blocks, inline code)  
✅ **Auto-scroll** to latest messages  
✅ **Smooth animations** on message load  
✅ **Multiline input** with Enter to send, Shift+Enter for new line  
✅ **Loading animation** during API calls  
✅ **Full accessibility** with ARIA attributes and keyboard navigation  
✅ **Perplexity API integration** using OpenAI-compatible format  

The app is now ready to use with your Perplexity API key!